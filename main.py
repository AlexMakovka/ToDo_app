import streamlit as st
import pandas as pd
from datetime import datetime
import os
from io import BytesIO

FILE_PATH = "todo_data.csv"

LANGUAGES = {
    "ru": {
        "title": "üìù Todo-–ª–∏—Å—Ç",
        "caption": "–£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å –ª—ë–≥–∫–æ—Å—Ç—å—é",
        "add_task": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É",
        "choose_or_enter": "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:",
        "or_enter_new": "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é:",
        "select_date": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏:",
        "select_time": "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏:",
        "add_button": "–î–æ–±–∞–≤–∏—Ç—å",
        "empty_warning": "–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É.",
        "success_added": "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        "filter_label": "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏:",
        "filter_all": "–í—Å–µ",
        "filter_not_done": "–¢–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ",
        "filter_done": "–¢–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ",
        "task_list": "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
        "no_tasks": "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
        "delete_button": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        "done_stats": "üìä **–ì–æ—Ç–æ–≤–æ:** {done} –∏–∑ {total}",
        "theme_label": "–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
        "theme_light": "–°–≤–µ—Ç–ª–∞—è",
        "theme_dark": "–¢—ë–º–Ω–∞—è",
        "sort_label": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:",
        "sort_created": "–î–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è",
        "sort_due": "–î–∞—Ç–µ –¥–µ–¥–ª–∞–π–Ω–∞",
        "sort_completed": "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏",
        "search_placeholder": "üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á...",
        "export_button": "üì• –°–∫–∞—á–∞—Ç—å –∑–∞–¥–∞—á–∏ Excel",
    },
    "uk": {
        "title": "üìù Todo-—Å–ø–∏—Å–æ–∫",
        "caption": "–ö–µ—Ä—É–π —Å–≤–æ—ó–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –∑ –ª–µ–≥–∫—ñ—Å—Ç—é",
        "add_task": "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è",
        "choose_or_enter": "–û–±–µ—Ä—ñ—Ç—å –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è:",
        "or_enter_new": "–ê–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É:",
        "select_date": "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∑–∞–≤–¥–∞–Ω–Ω—è:",
        "select_time": "–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –∑–∞–≤–¥–∞–Ω–Ω—è:",
        "add_button": "–î–æ–¥–∞—Ç–∏",
        "empty_warning": "–í–≤–µ–¥—ñ—Ç—å –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è.",
        "success_added": "–ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ!",
        "filter_label": "–ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:",
        "filter_all": "–í—Å—ñ",
        "filter_not_done": "–¢—ñ–ª—å–∫–∏ –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω—ñ",
        "filter_done": "–¢—ñ–ª—å–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ",
        "task_list": "üìã –°–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å",
        "no_tasks": "–ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.",
        "delete_button": "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
        "done_stats": "üìä **–í–∏–∫–æ–Ω–∞–Ω–æ:** {done} –∑ {total}",
        "theme_label": "–¢–µ–º–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É",
        "theme_light": "–°–≤—ñ—Ç–ª–∞",
        "theme_dark": "–¢–µ–º–Ω–∞",
        "sort_label": "–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞:",
        "sort_created": "–î–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è",
        "sort_due": "–î–∞—Ç–æ—é –¥–µ–¥–ª–∞–π–Ω—É",
        "sort_completed": "–í–∏–∫–æ–Ω–∞–Ω–Ω—è–º",
        "search_placeholder": "üîç –ü–æ—à—É–∫ –∑–∞–≤–¥–∞–Ω—å...",
        "export_button": "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è Excel",
    },
    "de": {
        "title": "üìù Aufgabenliste",
        "caption": "Verwalte deine Aufgaben ganz einfach",
        "add_task": "‚ûï Neue Aufgabe hinzuf√ºgen",
        "choose_or_enter": "W√§hle oder gib eine Aufgabe ein:",
        "or_enter_new": "Oder gib eine neue Aufgabe manuell ein:",
        "select_date": "W√§hle das Aufgabendatum:",
        "select_time": "W√§hle die Uhrzeit der Aufgabe:",
        "add_button": "Hinzuf√ºgen",
        "empty_warning": "Bitte gib eine Aufgabe ein oder w√§hle eine aus.",
        "success_added": "Aufgabe hinzugef√ºgt!",
        "filter_label": "Aufgaben anzeigen:",
        "filter_all": "Alle",
        "filter_not_done": "Nur unerledigte",
        "filter_done": "Nur erledigte",
        "task_list": "üìã Aufgabenliste",
        "no_tasks": "Keine Aufgaben zum Anzeigen.",
        "delete_button": "üóëÔ∏è L√∂schen",
        "done_stats": "üìä **Erledigt:** {done} von {total}",
        "theme_label": "Theme",
        "theme_light": "Hell",
        "theme_dark": "Dunkel",
        "sort_label": "Sortieren nach:",
        "sort_created": "Erstellungsdatum",
        "sort_due": "F√§lligkeitsdatum",
        "sort_completed": "Erledigt",
        "search_placeholder": "üîç Aufgaben suchen...",
        "export_button": "üì• Aufgaben Excel herunterladen",
    },
    "en": {
        "title": "üìù Todo List",
        "caption": "Manage your tasks easily",
        "add_task": "‚ûï Add New Task",
        "choose_or_enter": "Choose or enter a task:",
        "or_enter_new": "Or enter a new task manually:",
        "select_date": "Select task date:",
        "select_time": "Select task time:",
        "add_button": "Add",
        "empty_warning": "Please enter or select a task.",
        "success_added": "Task added!",
        "filter_label": "Show tasks:",
        "filter_all": "All",
        "filter_not_done": "Only not done",
        "filter_done": "Only done",
        "task_list": "üìã Task List",
        "no_tasks": "No tasks to display.",
        "delete_button": "üóëÔ∏è Delete",
        "done_stats": "üìä **Done:** {done} of {total}",
        "theme_label": "Theme",
        "theme_light": "Light",
        "theme_dark": "Dark",
        "sort_label": "Sort by:",
        "sort_created": "Creation date",
        "sort_due": "Due date",
        "sort_completed": "Completion",
        "search_placeholder": "üîç Search tasks...",
        "export_button": "üì• Download tasks Excel",
    }
}

def load_tasks():
    if os.path.exists(FILE_PATH):
        try:
            df = pd.read_csv(FILE_PATH)
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –¥–µ–¥–ª–∞–π–Ω–∞, –¥–æ–±–∞–≤–∏–º –∏—Ö
            if "DueDate" not in df.columns:
                df["DueDate"] = ""
            if "DueTime" not in df.columns:
                df["DueTime"] = ""
            return df
        except (pd.errors.EmptyDataError, FileNotFoundError):
            return pd.DataFrame(columns=["Task", "Completed", "Created", "DueDate", "DueTime"])
    else:
        return pd.DataFrame(columns=["Task", "Completed", "Created", "DueDate", "DueTime"])

def save_tasks(df):
    df.to_csv(FILE_PATH, index=False)

def add_task(task_text, due_date, due_time, df):
    new_row = {
        "Task": task_text,
        "Completed": False,
        "Created": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "DueDate": due_date.strftime("%Y-%m-%d") if due_date else "",
        "DueTime": due_time.strftime("%H:%M") if due_time else "",
    }
    return pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)

def delete_task(df, index):
    return df.drop(index).reset_index(drop=True)

def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="Tasks")
    output.seek(0)  # –í–µ—Ä–Ω—É—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ—Ç–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–æ
    return output.getvalue()



def main():
    st.set_page_config(page_title="Todo List", page_icon="‚úÖ")

    lang = st.sidebar.selectbox("üåê –Ø–∑—ã–∫ / Language", options=list(LANGUAGES.keys()))
    t = LANGUAGES[lang]

    # –¢–µ–º—ã
    theme = st.sidebar.selectbox(t["theme_label"], [t["theme_light"], t["theme_dark"]])
    if theme == t["theme_dark"]:
        st.markdown(
            """
            <style>
            .main {
                background-color: #0e1117;
                color: white;
            }
            div.stButton > button {
                background-color: #333;
                color: white;
            }
            </style>
            """, unsafe_allow_html=True
        )
    else:
        st.markdown(
            """
            <style>
            .main {
                background-color: white;
                color: black;
            }
            div.stButton > button {
                background-color: #eee;
                color: black;
            }
            </style>
            """, unsafe_allow_html=True
        )

    st.title(t["title"])
    st.caption(t["caption"])

    tasks_df = load_tasks()

    # –§–∏–ª—å—Ç—Ä –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
    filter_option = st.radio(t["filter_label"], [t["filter_all"], t["filter_not_done"], t["filter_done"]])

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_option = st.selectbox(
        t["sort_label"],
        [t["sort_created"], t["sort_due"], t["sort_completed"]]
    )

    # –ü–æ–∏—Å–∫
    search_text = st.text_input(t["search_placeholder"])

    # –í–≤–æ–¥ –∑–∞–¥–∞—á–∏
    with st.form("task_form"):
        task_input = st.text_input(t["or_enter_new"])
        due_date = st.date_input(t["select_date"], value=None)
        due_time = st.time_input(t["select_time"], value=None)
        submitted = st.form_submit_button(t["add_button"])

    if submitted:
        task_text = task_input.strip()
        if task_text == "":
            st.warning(t["empty_warning"])
        else:
            tasks_df = add_task(task_text, due_date, due_time, tasks_df)
            save_tasks(tasks_df)
            st.success(t["success_added"])

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    if filter_option == t["filter_not_done"]:
        filtered_df = tasks_df[tasks_df["Completed"] == False]
    elif filter_option == t["filter_done"]:
        filtered_df = tasks_df[tasks_df["Completed"] == True]
    else:
        filtered_df = tasks_df.copy()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    if search_text:
        filtered_df = filtered_df[filtered_df["Task"].str.contains(search_text, case=False, na=False)]

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    if sort_option == t["sort_created"]:
        filtered_df["Created_dt"] = pd.to_datetime(filtered_df["Created"], errors='coerce')
        filtered_df = filtered_df.sort_values("Created_dt", ascending=True)
    elif sort_option == t["sort_due"]:
        def due_datetime(row_inner):
            try:
                return datetime.strptime(f"{row_inner['DueDate']} {row_inner['DueTime']}", "%Y-%m-%d %H:%M")
            except Exception:
                return datetime.max
        filtered_df["Due_dt"] = filtered_df.apply(due_datetime, axis=1)
        filtered_df = filtered_df.sort_values("Due_dt", ascending=True)
    elif sort_option == t["sort_completed"]:
        filtered_df = filtered_df.sort_values("Completed")

    filtered_df = filtered_df.reset_index(drop=True)

    st.subheader(t["task_list"])

    if filtered_df.empty:
        st.info(t["no_tasks"])
    else:
        for i, row in filtered_df.iterrows():
            cols = st.columns([0.05, 0.65, 0.2, 0.1])
            checkbox = cols[0].checkbox("Done", value=row["Completed"], key=f"cb_{i}", label_visibility="collapsed")
            if checkbox != row["Completed"]:
                idx = tasks_df[(tasks_df["Task"] == row["Task"]) & (tasks_df["Created"] == row["Created"])].index
                if len(idx) == 1:
                    tasks_df.at[idx[0], "Completed"] = checkbox
                    save_tasks(tasks_df)

            task_display = f"~~{row['Task']}~~" if checkbox else row['Task']
            due_text = ""
            if row["DueDate"]:
                due_text = f"üìÖ {row['DueDate']}"
            if row["DueTime"]:
                due_text += f" ‚è∞ {row['DueTime']}"

            cols[1].markdown(f"{task_display}  \n{due_text}")

            if cols[2].button(t["delete_button"], key=f"del_{i}"):
                idx = tasks_df[(tasks_df["Task"] == row["Task"]) & (tasks_df["Created"] == row["Created"])].index
                if len(idx) == 1:
                    tasks_df = delete_task(tasks_df, idx[0])
                    save_tasks(tasks_df)
                    st.rerun()

    st.markdown("---")
    total = len(tasks_df)
    done = tasks_df["Completed"].sum()
    st.markdown(t["done_stats"].format(done=done, total=total))

    st.download_button(
        label=t["export_button"],
        data=to_excel(tasks_df),
        file_name="tasks.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )


if __name__ == "__main__":
    main()
